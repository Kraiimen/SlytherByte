DROP VIEW IF EXISTS top_5_tags CASCADE;
DROP VIEW IF EXISTS owned_games_count CASCADE;
DROP VIEW IF EXISTS games_playing_count CASCADE;
DROP VIEW IF EXISTS games_beaten_count CASCADE;
DROP VIEW IF EXISTS user_review_count CASCADE;

DROP TABLE IF EXISTS game_languages CASCADE;
DROP TABLE IF EXISTS game_media CASCADE;
DROP TABLE IF EXISTS game_tags CASCADE;
DROP TABLE IF EXISTS game_publishers CASCADE;
DROP TABLE IF EXISTS game_developers CASCADE;
DROP TABLE IF EXISTS game_stores CASCADE;
DROP TABLE IF EXISTS game_platforms CASCADE;
DROP TABLE IF EXISTS collection_games CASCADE;
DROP TABLE IF EXISTS user_game CASCADE;
DROP TABLE IF EXISTS game CASCADE;
DROP TABLE IF EXISTS review CASCADE;
DROP TABLE IF EXISTS language CASCADE;
DROP TABLE IF EXISTS tag CASCADE;
DROP TABLE IF EXISTS publisher CASCADE;
DROP TABLE IF EXISTS developer CASCADE;
DROP TABLE IF EXISTS franchise CASCADE;
DROP TABLE IF EXISTS store CASCADE;
DROP TABLE IF EXISTS platform CASCADE;
DROP TABLE IF EXISTS collection CASCADE;
DROP TABLE IF EXISTS user_account CASCADE;
DROP TABLE IF EXISTS user_profile CASCADE;

CREATE TABLE user_profile (
	user_profile_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	profile_name VARCHAR(24),
	bio VARCHAR(300),
	profile_pic_url VARCHAR
);

CREATE TABLE user_account (
	user_account_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	username_account VARCHAR(16) NOT NULL UNIQUE,
	email VARCHAR NOT NULL UNIQUE,
	password VARCHAR NOT NULL,
	user_profile_id INTEGER NOT NULL,
	authority VARCHAR NOT NULL,
	FOREIGN KEY (user_profile_id) REFERENCES user_profile(user_profile_id)
);

CREATE TABLE collection (
	collection_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR(30) NOT NULL,
	description VARCHAR(150),
	created_at DATE NOT NULL,
	user_profile_id INTEGER NOT NULL,
	FOREIGN KEY (user_profile_id) REFERENCES user_profile(user_profile_id)
);

CREATE TABLE platform (
	platform_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR NOT NULL
);

CREATE TABLE store (
	store_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR NOT NULL,
	icon_url VARCHAR,
	site_url VARCHAR NOT NULL
);

CREATE TABLE franchise (
	franchise_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR NOT NULL
);

CREATE TABLE developer (
	developer_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR NOT NULL
);

CREATE TABLE publisher (
	publisher_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR NOT NULL
);

CREATE TABLE tag (
	tag_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR NOT NULL
);

CREATE TABLE language (
	language_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name VARCHAR NOT NULL
);

CREATE TABLE game (
	game_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	cover_image_url VARCHAR,
	title VARCHAR NOT NULL, 
	release_date DATE,
	summary VARCHAR,
	franchise_id INTEGER NOT NULL, 
	FOREIGN KEY(franchise_id) REFERENCES franchise(franchise_id)
);

CREATE TABLE review (
	review_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	title VARCHAR(30) NOT NULL,
	description VARCHAR NOT NULL,
	date DATE NOT NULL, 
	user_profile_id INTEGER NOT NULL,
	game_id INTEGER NOT NULL,
	rating INTEGER NOT NULL,
	CONSTRAINT chk_rating CHECK(rating >= 1 AND rating <= 10),
	FOREIGN KEY(user_profile_id) REFERENCES user_profile(user_profile_id),
	FOREIGN KEY(game_id) REFERENCES game(game_id)
);

CREATE TABLE user_game (
	user_game_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	game_id INTEGER NOT NULL,
	user_profile_id INTEGER NOT NULL,
	status VARCHAR,
	is_owned BOOLEAN DEFAULT false,
	review_id INTEGER,
	completion_date DATE,
	FOREIGN KEY (user_profile_id) REFERENCES user_profile(user_profile_id),
	FOREIGN KEY(review_id) REFERENCES review(review_id),
	FOREIGN KEY(game_id) REFERENCES game(game_id),
	CONSTRAINT chk_status CHECK(status IN('Wishlist', 'Playing', 'Beaten'))
);

CREATE TABLE collection_games (
	collection_id INTEGER NOT NULL,
	game_id INTEGER NOT NULL,
	PRIMARY KEY (collection_id, game_id),
	FOREIGN KEY(collection_id) REFERENCES collection(collection_id),
	FOREIGN KEY(game_id) REFERENCES game(game_id)
);

CREATE TABLE game_platforms (
	game_id INTEGER NOT NULL,
	platform_id INTEGER NOT NULL,
	PRIMARY KEY(game_id, platform_id),
	FOREIGN KEY(game_id) REFERENCES game(game_id),
	FOREIGN KEY(platform_id) REFERENCES platform(platform_id)
);

CREATE TABLE game_stores (
	game_id INTEGER NOT NULL,
	store_id INTEGER NOT NULL,
	PRIMARY KEY(game_id, store_id),
	FOREIGN KEY(game_id) REFERENCES game(game_id),
	FOREIGN KEY(store_id) REFERENCES store(store_id)
);

CREATE TABLE game_developers (
	game_id INTEGER NOT NULL,
	developer_id INTEGER NOT NULL,
	PRIMARY KEY(game_id, developer_id),
	FOREIGN KEY(game_id) REFERENCES game(game_id),
	FOREIGN KEY(developer_id) REFERENCES developer(developer_id)
);

CREATE TABLE game_publishers (
	game_id INTEGER NOT NULL,
	publisher_id INTEGER NOT NULL,
	PRIMARY KEY(game_id, publisher_id),
	FOREIGN KEY(game_id) REFERENCES game(game_id),
	FOREIGN KEY(publisher_id) REFERENCES publisher(publisher_id)
);

CREATE TABLE game_tags (
	game_id INTEGER NOT NULL,
	tag_id INTEGER NOT NULL, 
	PRIMARY KEY(game_id, tag_id),
	FOREIGN KEY(game_id) REFERENCES game(game_id),
	FOREIGN KEY(tag_id) REFERENCES tag(tag_id)
);

CREATE TABLE game_media (
	game_media_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	game_media_url VARCHAR NOT NULL,
	is_trailer BOOLEAN NOT NULL DEFAULT false,
	game_id INTEGER NOT NULL, 
	FOREIGN KEY(game_id) REFERENCES game(game_id)
);

CREATE TABLE game_languages (
	game_id INTEGER NOT NULL,
	language_id INTEGER NOT NULL,
	PRIMARY KEY(game_id, language_id),
	FOREIGN KEY(game_id) REFERENCES game(game_id),
	FOREIGN KEY(language_id) REFERENCES language(language_id)
);

CREATE OR REPLACE VIEW top_5_tags AS (
    SELECT t.tag_id, t.name
    FROM tag t
    JOIN game_tags gt ON t.tag_id = gt.tag_id
    JOIN game g ON g.game_id = gt.game_id
    JOIN user_game ug ON ug.game_id = g.game_id
    GROUP BY t.tag_id
    ORDER BY COUNT(*) DESC
    LIMIT 5
);

CREATE OR REPLACE VIEW public.owned_games_count AS
SELECT 1 AS id,
count(*) AS owned_count
FROM user_game
WHERE is_owned = true;


CREATE OR REPLACE VIEW public.games_playing_count AS
SELECT 1 AS id, count(*) AS playing_count
FROM user_game
WHERE status::text = 'Playing'::text
GROUP BY user_profile_id;


CREATE OR REPLACE VIEW public.games_beaten_count AS 
SELECT 1 AS id, count(*) AS beaten_count
FROM user_game
WHERE status::text = 'Beaten'::text
GROUP BY user_profile_id;

CREATE OR REPLACE VIEW public.user_review_count AS
SELECT 1 AS id, count(*) AS review_count
FROM review
GROUP BY user_profile_id;

CREATE OR REPLACE VIEW public.top_5_tags AS 
SELECT t.tag_id, t.name
FROM tag t
    JOIN game_tags gt ON t.tag_id = gt.tag_id
    JOIN game g ON g.game_id = gt.game_id
    JOIN user_game ug ON ug.game_id = g.game_id
GROUP BY t.tag_id
ORDER BY (count(*)) DESC
LIMIT 5;
